{"version":3,"file":"cucumber-to-junit.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import jsonFile from 'jsonfile';\nimport builder from \"junit-report-builder\";\nimport { Feature, Scenario, StepStatus } from \"./model/cucumber\";\nimport { Config } from \"./model/config\";\n\nexport class CucumberConverter {\n  constructor(private config: Config) {}\n\n  public convertToJunit(inputFilePath: string, outputFilePath: string): void {\n    const cucumberReport: Feature[] = jsonFile.readFileSync(inputFilePath);\n\n    for (const feature of cucumberReport) {\n      this.addTestSuite(feature);\n    }\n\n    builder.writeTo(outputFilePath);\n  }\n\n  private addTestSuite(feature: Feature): void {\n    let suiteDuration = 0;\n    const suite = builder.testSuite().name(feature.name);\n\n    for (const scenario of feature.elements) {\n      suiteDuration += this.addTestCases(scenario, suite);\n    }\n\n    suite.time(suiteDuration);\n  }\n\n  private addTestCases(scenario: Scenario, suite: any): number {\n    if (scenario.type === 'background') {\n      return 0;\n    }\n\n    const scenarioResult = this.getScenarioResult(scenario);\n\n    const testCase = suite.testCase()\n      .name(scenario.name)\n      .className(scenario.id)\n      .time(scenarioResult.duration);\n\n    if (scenarioResult.status === 'failed') {\n        testCase.failure(scenarioResult.failureMessage);\n    } else if (scenarioResult.status === 'skipped' || scenarioResult.status === 'undefined') {\n      testCase.skipped();\n    }\n\n    return scenarioResult.duration;\n  }\n\n  private getScenarioResult(scenario: Scenario) {\n    let scenarioStatus: StepStatus = 'passed';\n    let failureMessage = '';\n    let scenarioDuration = 0;\n\n    for (const step of scenario.steps) {\n      scenarioDuration += (step.result.duration ? step.result.duration / 1000000000 : 0); //ns to seconds;\n\n      if(scenarioStatus === 'failed') {\n        continue;\n      }\n\n      if (step.result.status === 'failed') {\n        scenarioStatus = 'failed';\n        failureMessage = step.result.error_message!;\n      }\n      else if (this.config.markUndefinedAsFailed && step.result.status === 'undefined') {\n        scenarioStatus = 'failed';\n        failureMessage = 'One or more steps are undefined';\n      } else {\n        scenarioStatus = step.result.status;\n      }\n    }\n\n    return {\n      status: scenarioStatus,\n      failureMessage: failureMessage,\n      duration: scenarioDuration\n    };\n  }\n}\n"],"names":["config","convertToJunit","inputFilePath","outputFilePath","jsonFile","readFileSync","addTestSuite","builder","writeTo","feature","suiteDuration","suite","testSuite","name","elements","this","addTestCases","time","scenario","type","scenarioResult","getScenarioResult","testCase","className","id","duration","status","failure","failureMessage","skipped","scenarioStatus","scenarioDuration","steps","step","result","error_message","markUndefinedAsFailed"],"mappings":"4jCAMsBA,eAAAA,6BAEbC,eAAA,SAAeC,EAAuBC,iBACTC,EAASC,aAAaH,wBAGjDI,sBAGPC,EAAQC,QAAQL,MAGVG,aAAA,SAAaG,aACfC,EAAgB,EACdC,EAAQJ,EAAQK,YAAYC,KAAKJ,EAAQI,UAExBJ,EAAQK,yBAC7BJ,GAAiBK,KAAKC,qBAAuBL,GAG/CA,EAAMM,KAAKP,MAGLM,aAAA,SAAaE,EAAoBP,MACjB,eAAlBO,EAASC,YACJ,MAGHC,EAAiBL,KAAKM,kBAAkBH,GAExCI,EAAWX,EAAMW,WACpBT,KAAKK,EAASL,MACdU,UAAUL,EAASM,IACnBP,KAAKG,EAAeK,gBAEO,WAA1BL,EAAeM,OACfJ,EAASK,QAAQP,EAAeQ,gBACC,YAA1BR,EAAeM,QAAkD,cAA1BN,EAAeM,QAC/DJ,EAASO,UAGJT,EAAeK,YAGhBJ,kBAAA,SAAkBH,aACpBY,EAA6B,SAC7BF,EAAiB,GACjBG,EAAmB,MAEJb,EAASc,sBAAO,KAAxBC,UACTF,GAAqBE,EAAKC,OAAOT,SAAWQ,EAAKC,OAAOT,SAAW,IAAa,EAE1D,WAAnBK,IAIwB,WAAvBG,EAAKC,OAAOR,QACdI,EAAiB,SACjBF,EAAiBK,EAAKC,OAAOC,eAEtBpB,KAAKf,OAAOoC,uBAAgD,cAAvBH,EAAKC,OAAOR,QACxDI,EAAiB,SACjBF,EAAiB,mCAEjBE,EAAiBG,EAAKC,OAAOR,cAI1B,CACLA,OAAQI,EACRF,eAAgBA,EAChBH,SAAUM"}